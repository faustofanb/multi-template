# 启用 Gradle 构建缓存，通过重用之前成功构建的输出来节省时间。
# https://docs.gradle.org/current/userguide/build_cache.html
org.gradle.caching=true

# 启用 Gradle 配置缓存，通过重用构建配置来加速构建。
# 注意：部分插件可能尚不兼容配置缓存。
# https://docs.gradle.org/current/userguide/configuration_cache.html
org.gradle.configuration-cache=true

# 统一管理项目版本号，方便修改和 CI/CD 集成
# 在 build.gradle.kts 或约定插件中可以通过 `providers.gradleProperty("projectVersion").get()` 读取
projectVersion=0.0.1

# 允许 Gradle 在多核处理器上并行执行独立的任务，可能加速构建过程。
# 仅当项目任务之间没有严格顺序依赖时启用。
org.gradle.parallel=true

# 启用增量构建，通过重用之前成功构建的输出来加速构建。
org.gradle.incremental=true

# 禁用 Gradle 守护进程，使用独立进程执行构建。
# 有助于减少内存占用，但可能会增加启动时间。
org.gradle.daemon=true

# 设置 JVM 最大内存为 512MB。
org.gradle.jvmargs=-Xmx512m

# 启用 Gradle 的构建缓存，通过重用之前成功构建的输出来加速构建。
# 有助于减少构建时间，但可能会增加内存占用。
org.gradle.build-cache=true

# 设置 Gradle 的日志级别为 INFO。
org.gradle.logging.level=WARN

# 启用 Gradle 的构建扫描，用于收集构建信息并生成构建报告。
org.gradle.scan.export-stacktrace=true

# 美化Gradle的输出
org.gradle.console=rich

# 设置kotlin的代码风格
kotlin.code.style=official

# 禁用Kotlin增量编译
#kotlin.incremental.useClasspathSnapshot=false

# 启用Kapt增量编译
#kapt.incremental.apt=true
